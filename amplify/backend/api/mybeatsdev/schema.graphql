# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
    globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Doctor @model @auth(rules: [{ allow: public }]) {
    doctorID: ID! @primaryKey
    firstname: String!
    lastname: String!
    email: String
    phoneNumber: String
    licenseNumber: String
    upiId: String
    specialties: [Specialty] @manyToMany(relationName: "DoctorSpecialties")
    primarySpecializationId: ID @index(name: "byPrimarySpecialization")
    primarySpecialization: Specialty
        @hasOne(fields: ["primarySpecializationId"])
    address: String
    city: String
    state: String
    experience: String
    secondarySpecialization: String
    availableForVideoConsultation: Boolean!
    feeForVideoConsultation: String!
    educationExperience: String
    awardsRecognition: String
    website: String
    zipcode: String! @index(name: "byzipcode", queryField: "doctorByZipcode")
    appointments: [Appointment]
        @hasMany(indexName: "byDoctor", fields: ["doctorID"])
    availability: [Availability]
        @hasMany(indexName: "byDoctor", fields: ["doctorID"])
}

type Specialty @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    name: String! @index(name: "byName", queryField: "specialtyByName")
    doctors: [Doctor] @manyToMany(relationName: "DoctorSpecialties")
}

type Patient @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    firstname: String!
    lastname: String!
    email: String
    phoneNumber: String
    address: String
    zipcode: String
    appointments: [Appointment]
        @hasMany(indexName: "byPatient", fields: ["id"])
    age: String
    weight: String
    height: String
    profession: String
    underlyingCondition: String
}

type Availability @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    doctorID: ID!
        @index(
            name: "byDoctor"
            queryField: "availabilityByDoctor"
            sortKeyFields: ["startTime"]
        )
    startTime: AWSDateTime!
    endTime: AWSDateTime!
    doctor: Doctor @belongsTo(fields: ["doctorID"])
}

type Appointment @model @auth(rules: [{ allow: public }]) {
    id: ID! @primaryKey
    doctorID: ID!
        @index(
            name: "byDoctor"
            queryField: "slotsByDoctor"
            sortKeyFields: ["startTime"]
        )
    patientId: ID!
        @index(
            name: "byPatient"
            queryField: "slotsByPatient"
            sortKeyFields: ["startTime"]
        )
    startTime: AWSDateTime!
    endTime: AWSDateTime!
    type: String
    isBooked: Boolean!
    doctor: Doctor @belongsTo(fields: ["doctorID"])
    patient: Patient @belongsTo(fields: ["patientId"])
}
