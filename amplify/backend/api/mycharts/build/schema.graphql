type Doctor @aws_iam @aws_api_key {
  doctorID: ID!
  firstname: String!
  lastname: String!
  email: String
  phoneNumber: String
  registrationNumber: String
  upiId: String
  specialties(filter: ModelDoctorSpecialtiesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDoctorSpecialtiesConnection
  address: String
  zipcode: String!
  appointmentSlots(filter: ModelAppointmentSlotFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAppointmentSlotConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Specialty @aws_iam @aws_api_key {
  id: ID!
  name: String!
  doctors(filter: ModelDoctorSpecialtiesFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelDoctorSpecialtiesConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type Patient @aws_iam @aws_api_key {
  id: ID!
  firstname: String!
  lastname: String!
  email: String
  phoneNumber: String
  address: String
  zipcode: String
  appointmentSlots(filter: ModelAppointmentSlotFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAppointmentSlotConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type AppointmentSlot @aws_iam @aws_api_key {
  id: ID!
  doctorId: ID!
  patientId: ID!
  startTime: String!
  endTime: String!
  isBooked: Boolean!
  doctor: Doctor
  patient: Patient
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

type DoctorSpecialties @aws_iam @aws_api_key {
  id: ID!
  doctorDoctorID: ID!
  specialtyId: ID!
  doctor: Doctor!
  specialty: Specialty!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  _version: Int!
  _deleted: Boolean
  _lastChangedAt: AWSTimestamp!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDoctorConnection @aws_api_key @aws_iam {
  items: [Doctor]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDoctorFilterInput {
  doctorID: ModelIDInput
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  registrationNumber: ModelStringInput
  upiId: ModelStringInput
  address: ModelStringInput
  zipcode: ModelStringInput
  and: [ModelDoctorFilterInput]
  or: [ModelDoctorFilterInput]
  not: ModelDoctorFilterInput
  _deleted: ModelBooleanInput
}

type Query {
  getDoctor(doctorID: ID!): Doctor @aws_api_key @aws_iam
  listDoctors(doctorID: ID, filter: ModelDoctorFilterInput, limit: Int, nextToken: String, sortDirection: ModelSortDirection): ModelDoctorConnection @aws_api_key @aws_iam
  syncDoctors(filter: ModelDoctorFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDoctorConnection @aws_api_key @aws_iam
  doctorByZipcode(zipcode: String!, sortDirection: ModelSortDirection, filter: ModelDoctorFilterInput, limit: Int, nextToken: String): ModelDoctorConnection @aws_api_key @aws_iam
  getSpecialty(id: ID!): Specialty @aws_api_key @aws_iam
  listSpecialties(filter: ModelSpecialtyFilterInput, limit: Int, nextToken: String): ModelSpecialtyConnection @aws_api_key @aws_iam
  syncSpecialties(filter: ModelSpecialtyFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelSpecialtyConnection @aws_api_key @aws_iam
  specialtyByName(name: String!, sortDirection: ModelSortDirection, filter: ModelSpecialtyFilterInput, limit: Int, nextToken: String): ModelSpecialtyConnection @aws_api_key @aws_iam
  getPatient(id: ID!): Patient @aws_api_key @aws_iam
  listPatients(filter: ModelPatientFilterInput, limit: Int, nextToken: String): ModelPatientConnection @aws_api_key @aws_iam
  syncPatients(filter: ModelPatientFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelPatientConnection @aws_api_key @aws_iam
  getAppointmentSlot(id: ID!): AppointmentSlot @aws_api_key @aws_iam
  listAppointmentSlots(filter: ModelAppointmentSlotFilterInput, limit: Int, nextToken: String): ModelAppointmentSlotConnection @aws_api_key @aws_iam
  syncAppointmentSlots(filter: ModelAppointmentSlotFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelAppointmentSlotConnection @aws_api_key @aws_iam
  slotsByDoctor(doctorId: ID!, sortDirection: ModelSortDirection, filter: ModelAppointmentSlotFilterInput, limit: Int, nextToken: String): ModelAppointmentSlotConnection @aws_api_key @aws_iam
  slotsByPatient(patientId: ID!, sortDirection: ModelSortDirection, filter: ModelAppointmentSlotFilterInput, limit: Int, nextToken: String): ModelAppointmentSlotConnection @aws_api_key @aws_iam
  getDoctorSpecialties(id: ID!): DoctorSpecialties @aws_api_key @aws_iam
  listDoctorSpecialties(filter: ModelDoctorSpecialtiesFilterInput, limit: Int, nextToken: String): ModelDoctorSpecialtiesConnection @aws_api_key @aws_iam
  syncDoctorSpecialties(filter: ModelDoctorSpecialtiesFilterInput, limit: Int, nextToken: String, lastSync: AWSTimestamp): ModelDoctorSpecialtiesConnection @aws_api_key @aws_iam
  doctorSpecialtiesByDoctorDoctorID(doctorDoctorID: ID!, sortDirection: ModelSortDirection, filter: ModelDoctorSpecialtiesFilterInput, limit: Int, nextToken: String): ModelDoctorSpecialtiesConnection @aws_api_key @aws_iam
  doctorSpecialtiesBySpecialtyId(specialtyId: ID!, sortDirection: ModelSortDirection, filter: ModelDoctorSpecialtiesFilterInput, limit: Int, nextToken: String): ModelDoctorSpecialtiesConnection @aws_api_key @aws_iam
}

input ModelDoctorConditionInput {
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  registrationNumber: ModelStringInput
  upiId: ModelStringInput
  address: ModelStringInput
  zipcode: ModelStringInput
  and: [ModelDoctorConditionInput]
  or: [ModelDoctorConditionInput]
  not: ModelDoctorConditionInput
  _deleted: ModelBooleanInput
}

input CreateDoctorInput {
  doctorID: ID!
  firstname: String!
  lastname: String!
  email: String
  phoneNumber: String
  registrationNumber: String
  upiId: String
  address: String
  zipcode: String!
  _version: Int
}

input UpdateDoctorInput {
  doctorID: ID!
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  registrationNumber: String
  upiId: String
  address: String
  zipcode: String
  _version: Int
}

input DeleteDoctorInput {
  doctorID: ID!
  _version: Int
}

type Mutation {
  createDoctor(input: CreateDoctorInput!, condition: ModelDoctorConditionInput): Doctor @aws_api_key @aws_iam
  updateDoctor(input: UpdateDoctorInput!, condition: ModelDoctorConditionInput): Doctor @aws_api_key @aws_iam
  deleteDoctor(input: DeleteDoctorInput!, condition: ModelDoctorConditionInput): Doctor @aws_api_key @aws_iam
  createSpecialty(input: CreateSpecialtyInput!, condition: ModelSpecialtyConditionInput): Specialty @aws_api_key @aws_iam
  updateSpecialty(input: UpdateSpecialtyInput!, condition: ModelSpecialtyConditionInput): Specialty @aws_api_key @aws_iam
  deleteSpecialty(input: DeleteSpecialtyInput!, condition: ModelSpecialtyConditionInput): Specialty @aws_api_key @aws_iam
  createPatient(input: CreatePatientInput!, condition: ModelPatientConditionInput): Patient @aws_api_key @aws_iam
  updatePatient(input: UpdatePatientInput!, condition: ModelPatientConditionInput): Patient @aws_api_key @aws_iam
  deletePatient(input: DeletePatientInput!, condition: ModelPatientConditionInput): Patient @aws_api_key @aws_iam
  createAppointmentSlot(input: CreateAppointmentSlotInput!, condition: ModelAppointmentSlotConditionInput): AppointmentSlot @aws_api_key @aws_iam
  updateAppointmentSlot(input: UpdateAppointmentSlotInput!, condition: ModelAppointmentSlotConditionInput): AppointmentSlot @aws_api_key @aws_iam
  deleteAppointmentSlot(input: DeleteAppointmentSlotInput!, condition: ModelAppointmentSlotConditionInput): AppointmentSlot @aws_api_key @aws_iam
  createDoctorSpecialties(input: CreateDoctorSpecialtiesInput!, condition: ModelDoctorSpecialtiesConditionInput): DoctorSpecialties @aws_api_key @aws_iam
  updateDoctorSpecialties(input: UpdateDoctorSpecialtiesInput!, condition: ModelDoctorSpecialtiesConditionInput): DoctorSpecialties @aws_api_key @aws_iam
  deleteDoctorSpecialties(input: DeleteDoctorSpecialtiesInput!, condition: ModelDoctorSpecialtiesConditionInput): DoctorSpecialties @aws_api_key @aws_iam
}

input ModelSubscriptionDoctorFilterInput {
  doctorID: ModelSubscriptionIDInput
  firstname: ModelSubscriptionStringInput
  lastname: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phoneNumber: ModelSubscriptionStringInput
  registrationNumber: ModelSubscriptionStringInput
  upiId: ModelSubscriptionStringInput
  address: ModelSubscriptionStringInput
  zipcode: ModelSubscriptionStringInput
  and: [ModelSubscriptionDoctorFilterInput]
  or: [ModelSubscriptionDoctorFilterInput]
  _deleted: ModelBooleanInput
}

type Subscription {
  onCreateDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["createDoctor"]) @aws_api_key @aws_iam
  onUpdateDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["updateDoctor"]) @aws_api_key @aws_iam
  onDeleteDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["deleteDoctor"]) @aws_api_key @aws_iam
  onCreateSpecialty(filter: ModelSubscriptionSpecialtyFilterInput): Specialty @aws_subscribe(mutations: ["createSpecialty"]) @aws_api_key @aws_iam
  onUpdateSpecialty(filter: ModelSubscriptionSpecialtyFilterInput): Specialty @aws_subscribe(mutations: ["updateSpecialty"]) @aws_api_key @aws_iam
  onDeleteSpecialty(filter: ModelSubscriptionSpecialtyFilterInput): Specialty @aws_subscribe(mutations: ["deleteSpecialty"]) @aws_api_key @aws_iam
  onCreatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["createPatient"]) @aws_api_key @aws_iam
  onUpdatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["updatePatient"]) @aws_api_key @aws_iam
  onDeletePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["deletePatient"]) @aws_api_key @aws_iam
  onCreateAppointmentSlot(filter: ModelSubscriptionAppointmentSlotFilterInput): AppointmentSlot @aws_subscribe(mutations: ["createAppointmentSlot"]) @aws_api_key @aws_iam
  onUpdateAppointmentSlot(filter: ModelSubscriptionAppointmentSlotFilterInput): AppointmentSlot @aws_subscribe(mutations: ["updateAppointmentSlot"]) @aws_api_key @aws_iam
  onDeleteAppointmentSlot(filter: ModelSubscriptionAppointmentSlotFilterInput): AppointmentSlot @aws_subscribe(mutations: ["deleteAppointmentSlot"]) @aws_api_key @aws_iam
  onCreateDoctorSpecialties(filter: ModelSubscriptionDoctorSpecialtiesFilterInput): DoctorSpecialties @aws_subscribe(mutations: ["createDoctorSpecialties"]) @aws_api_key @aws_iam
  onUpdateDoctorSpecialties(filter: ModelSubscriptionDoctorSpecialtiesFilterInput): DoctorSpecialties @aws_subscribe(mutations: ["updateDoctorSpecialties"]) @aws_api_key @aws_iam
  onDeleteDoctorSpecialties(filter: ModelSubscriptionDoctorSpecialtiesFilterInput): DoctorSpecialties @aws_subscribe(mutations: ["deleteDoctorSpecialties"]) @aws_api_key @aws_iam
}

type ModelSpecialtyConnection @aws_api_key @aws_iam {
  items: [Specialty]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelSpecialtyFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  and: [ModelSpecialtyFilterInput]
  or: [ModelSpecialtyFilterInput]
  not: ModelSpecialtyFilterInput
  _deleted: ModelBooleanInput
}

input ModelSpecialtyConditionInput {
  name: ModelStringInput
  and: [ModelSpecialtyConditionInput]
  or: [ModelSpecialtyConditionInput]
  not: ModelSpecialtyConditionInput
  _deleted: ModelBooleanInput
}

input CreateSpecialtyInput {
  id: ID
  name: String!
  _version: Int
}

input UpdateSpecialtyInput {
  id: ID!
  name: String
  _version: Int
}

input DeleteSpecialtyInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionSpecialtyFilterInput {
  id: ModelSubscriptionIDInput
  name: ModelSubscriptionStringInput
  and: [ModelSubscriptionSpecialtyFilterInput]
  or: [ModelSubscriptionSpecialtyFilterInput]
  _deleted: ModelBooleanInput
}

type ModelPatientConnection @aws_api_key @aws_iam {
  items: [Patient]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelPatientFilterInput {
  id: ModelIDInput
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  address: ModelStringInput
  zipcode: ModelStringInput
  and: [ModelPatientFilterInput]
  or: [ModelPatientFilterInput]
  not: ModelPatientFilterInput
  _deleted: ModelBooleanInput
}

input ModelPatientConditionInput {
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  address: ModelStringInput
  zipcode: ModelStringInput
  and: [ModelPatientConditionInput]
  or: [ModelPatientConditionInput]
  not: ModelPatientConditionInput
  _deleted: ModelBooleanInput
}

input CreatePatientInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String
  phoneNumber: String
  address: String
  zipcode: String
  _version: Int
}

input UpdatePatientInput {
  id: ID!
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
  address: String
  zipcode: String
  _version: Int
}

input DeletePatientInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionPatientFilterInput {
  id: ModelSubscriptionIDInput
  firstname: ModelSubscriptionStringInput
  lastname: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phoneNumber: ModelSubscriptionStringInput
  address: ModelSubscriptionStringInput
  zipcode: ModelSubscriptionStringInput
  and: [ModelSubscriptionPatientFilterInput]
  or: [ModelSubscriptionPatientFilterInput]
  _deleted: ModelBooleanInput
}

type ModelAppointmentSlotConnection @aws_iam @aws_api_key {
  items: [AppointmentSlot]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelAppointmentSlotFilterInput {
  id: ModelIDInput
  doctorId: ModelIDInput
  patientId: ModelIDInput
  startTime: ModelStringInput
  endTime: ModelStringInput
  isBooked: ModelBooleanInput
  and: [ModelAppointmentSlotFilterInput]
  or: [ModelAppointmentSlotFilterInput]
  not: ModelAppointmentSlotFilterInput
  _deleted: ModelBooleanInput
}

input ModelAppointmentSlotConditionInput {
  doctorId: ModelIDInput
  patientId: ModelIDInput
  startTime: ModelStringInput
  endTime: ModelStringInput
  isBooked: ModelBooleanInput
  and: [ModelAppointmentSlotConditionInput]
  or: [ModelAppointmentSlotConditionInput]
  not: ModelAppointmentSlotConditionInput
  _deleted: ModelBooleanInput
}

input CreateAppointmentSlotInput {
  id: ID
  doctorId: ID!
  patientId: ID!
  startTime: String!
  endTime: String!
  isBooked: Boolean!
  _version: Int
}

input UpdateAppointmentSlotInput {
  id: ID!
  doctorId: ID
  patientId: ID
  startTime: String
  endTime: String
  isBooked: Boolean
  _version: Int
}

input DeleteAppointmentSlotInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionAppointmentSlotFilterInput {
  id: ModelSubscriptionIDInput
  doctorId: ModelSubscriptionIDInput
  patientId: ModelSubscriptionIDInput
  startTime: ModelSubscriptionStringInput
  endTime: ModelSubscriptionStringInput
  isBooked: ModelSubscriptionBooleanInput
  and: [ModelSubscriptionAppointmentSlotFilterInput]
  or: [ModelSubscriptionAppointmentSlotFilterInput]
  _deleted: ModelBooleanInput
}

type ModelDoctorSpecialtiesConnection @aws_iam @aws_api_key {
  items: [DoctorSpecialties]!
  nextToken: String
  startedAt: AWSTimestamp
}

input ModelDoctorSpecialtiesFilterInput {
  id: ModelIDInput
  doctorDoctorID: ModelIDInput
  specialtyId: ModelIDInput
  and: [ModelDoctorSpecialtiesFilterInput]
  or: [ModelDoctorSpecialtiesFilterInput]
  not: ModelDoctorSpecialtiesFilterInput
  _deleted: ModelBooleanInput
}

input ModelDoctorSpecialtiesConditionInput {
  doctorDoctorID: ModelIDInput
  specialtyId: ModelIDInput
  and: [ModelDoctorSpecialtiesConditionInput]
  or: [ModelDoctorSpecialtiesConditionInput]
  not: ModelDoctorSpecialtiesConditionInput
  _deleted: ModelBooleanInput
}

input CreateDoctorSpecialtiesInput {
  id: ID
  doctorDoctorID: ID!
  specialtyId: ID!
  _version: Int
}

input UpdateDoctorSpecialtiesInput {
  id: ID!
  doctorDoctorID: ID
  specialtyId: ID
  _version: Int
}

input DeleteDoctorSpecialtiesInput {
  id: ID!
  _version: Int
}

input ModelSubscriptionDoctorSpecialtiesFilterInput {
  id: ModelSubscriptionIDInput
  doctorDoctorID: ModelSubscriptionIDInput
  specialtyId: ModelSubscriptionIDInput
  and: [ModelSubscriptionDoctorSpecialtiesFilterInput]
  or: [ModelSubscriptionDoctorSpecialtiesFilterInput]
  _deleted: ModelBooleanInput
}
