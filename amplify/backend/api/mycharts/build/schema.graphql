type Doctor @aws_iam @aws_api_key {
  id: ID!
  firstname: String!
  lastname: String!
  email: String
  specialization: String!
  phoneNumber: String
  address: String
  zipcode: String
  availableSlots: AWSJSON
  appointments(filter: ModelAppointmentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAppointmentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Patient @aws_iam @aws_api_key {
  id: ID!
  firstname: String!
  lastname: String!
  email: String
  phoneNumber: String
  appointments(filter: ModelAppointmentFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelAppointmentConnection
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

type Appointment @aws_iam @aws_api_key {
  id: ID!
  doctor: Doctor
  patient: Patient
  chosenSlot: String
  date: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  doctorAppointmentsId: ID
  patientAppointmentsId: ID
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelSubscriptionStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  in: [String]
  notIn: [String]
}

input ModelSubscriptionIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  in: [Int]
  notIn: [Int]
}

input ModelSubscriptionFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  in: [Float]
  notIn: [Float]
}

input ModelSubscriptionBooleanInput {
  ne: Boolean
  eq: Boolean
}

input ModelSubscriptionIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  in: [ID]
  notIn: [ID]
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelDoctorConnection @aws_api_key @aws_iam {
  items: [Doctor]!
  nextToken: String
}

input ModelDoctorFilterInput {
  id: ModelIDInput
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  specialization: ModelStringInput
  phoneNumber: ModelStringInput
  address: ModelStringInput
  zipcode: ModelStringInput
  availableSlots: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelDoctorFilterInput]
  or: [ModelDoctorFilterInput]
  not: ModelDoctorFilterInput
}

type Query {
  getDoctor(id: ID!): Doctor @aws_api_key @aws_iam
  listDoctors(filter: ModelDoctorFilterInput, limit: Int, nextToken: String): ModelDoctorConnection @aws_api_key @aws_iam
  getPatient(id: ID!): Patient @aws_api_key @aws_iam
  listPatients(filter: ModelPatientFilterInput, limit: Int, nextToken: String): ModelPatientConnection @aws_api_key @aws_iam
  getAppointment(id: ID!): Appointment @aws_api_key @aws_iam
  listAppointments(filter: ModelAppointmentFilterInput, limit: Int, nextToken: String): ModelAppointmentConnection @aws_api_key @aws_iam
}

input ModelDoctorConditionInput {
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  specialization: ModelStringInput
  phoneNumber: ModelStringInput
  address: ModelStringInput
  zipcode: ModelStringInput
  availableSlots: ModelStringInput
  and: [ModelDoctorConditionInput]
  or: [ModelDoctorConditionInput]
  not: ModelDoctorConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreateDoctorInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String
  specialization: String!
  phoneNumber: String
  address: String
  zipcode: String
  availableSlots: AWSJSON
}

input UpdateDoctorInput {
  id: ID!
  firstname: String
  lastname: String
  email: String
  specialization: String
  phoneNumber: String
  address: String
  zipcode: String
  availableSlots: AWSJSON
}

input DeleteDoctorInput {
  id: ID!
}

type Mutation {
  createDoctor(input: CreateDoctorInput!, condition: ModelDoctorConditionInput): Doctor @aws_api_key @aws_iam
  updateDoctor(input: UpdateDoctorInput!, condition: ModelDoctorConditionInput): Doctor @aws_api_key @aws_iam
  deleteDoctor(input: DeleteDoctorInput!, condition: ModelDoctorConditionInput): Doctor @aws_api_key @aws_iam
  createPatient(input: CreatePatientInput!, condition: ModelPatientConditionInput): Patient @aws_api_key @aws_iam
  updatePatient(input: UpdatePatientInput!, condition: ModelPatientConditionInput): Patient @aws_api_key @aws_iam
  deletePatient(input: DeletePatientInput!, condition: ModelPatientConditionInput): Patient @aws_api_key @aws_iam
  createAppointment(input: CreateAppointmentInput!, condition: ModelAppointmentConditionInput): Appointment @aws_api_key @aws_iam
  updateAppointment(input: UpdateAppointmentInput!, condition: ModelAppointmentConditionInput): Appointment @aws_api_key @aws_iam
  deleteAppointment(input: DeleteAppointmentInput!, condition: ModelAppointmentConditionInput): Appointment @aws_api_key @aws_iam
}

input ModelSubscriptionDoctorFilterInput {
  id: ModelSubscriptionIDInput
  firstname: ModelSubscriptionStringInput
  lastname: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  specialization: ModelSubscriptionStringInput
  phoneNumber: ModelSubscriptionStringInput
  address: ModelSubscriptionStringInput
  zipcode: ModelSubscriptionStringInput
  availableSlots: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionDoctorFilterInput]
  or: [ModelSubscriptionDoctorFilterInput]
  doctorAppointmentsId: ModelSubscriptionIDInput
}

type Subscription {
  onCreateDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["createDoctor"]) @aws_api_key @aws_iam
  onUpdateDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["updateDoctor"]) @aws_api_key @aws_iam
  onDeleteDoctor(filter: ModelSubscriptionDoctorFilterInput): Doctor @aws_subscribe(mutations: ["deleteDoctor"]) @aws_api_key @aws_iam
  onCreatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["createPatient"]) @aws_api_key @aws_iam
  onUpdatePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["updatePatient"]) @aws_api_key @aws_iam
  onDeletePatient(filter: ModelSubscriptionPatientFilterInput): Patient @aws_subscribe(mutations: ["deletePatient"]) @aws_api_key @aws_iam
  onCreateAppointment(filter: ModelSubscriptionAppointmentFilterInput): Appointment @aws_subscribe(mutations: ["createAppointment"]) @aws_api_key @aws_iam
  onUpdateAppointment(filter: ModelSubscriptionAppointmentFilterInput): Appointment @aws_subscribe(mutations: ["updateAppointment"]) @aws_api_key @aws_iam
  onDeleteAppointment(filter: ModelSubscriptionAppointmentFilterInput): Appointment @aws_subscribe(mutations: ["deleteAppointment"]) @aws_api_key @aws_iam
}

type ModelPatientConnection @aws_api_key @aws_iam {
  items: [Patient]!
  nextToken: String
}

input ModelPatientFilterInput {
  id: ModelIDInput
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelPatientFilterInput]
  or: [ModelPatientFilterInput]
  not: ModelPatientFilterInput
}

input ModelPatientConditionInput {
  firstname: ModelStringInput
  lastname: ModelStringInput
  email: ModelStringInput
  phoneNumber: ModelStringInput
  and: [ModelPatientConditionInput]
  or: [ModelPatientConditionInput]
  not: ModelPatientConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
}

input CreatePatientInput {
  id: ID
  firstname: String!
  lastname: String!
  email: String
  phoneNumber: String
}

input UpdatePatientInput {
  id: ID!
  firstname: String
  lastname: String
  email: String
  phoneNumber: String
}

input DeletePatientInput {
  id: ID!
}

input ModelSubscriptionPatientFilterInput {
  id: ModelSubscriptionIDInput
  firstname: ModelSubscriptionStringInput
  lastname: ModelSubscriptionStringInput
  email: ModelSubscriptionStringInput
  phoneNumber: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionPatientFilterInput]
  or: [ModelSubscriptionPatientFilterInput]
  patientAppointmentsId: ModelSubscriptionIDInput
}

type ModelAppointmentConnection @aws_iam @aws_api_key {
  items: [Appointment]!
  nextToken: String
}

input ModelAppointmentFilterInput {
  id: ModelIDInput
  chosenSlot: ModelStringInput
  date: ModelStringInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  and: [ModelAppointmentFilterInput]
  or: [ModelAppointmentFilterInput]
  not: ModelAppointmentFilterInput
  doctorAppointmentsId: ModelIDInput
  patientAppointmentsId: ModelIDInput
}

input ModelAppointmentConditionInput {
  chosenSlot: ModelStringInput
  date: ModelStringInput
  and: [ModelAppointmentConditionInput]
  or: [ModelAppointmentConditionInput]
  not: ModelAppointmentConditionInput
  createdAt: ModelStringInput
  updatedAt: ModelStringInput
  doctorAppointmentsId: ModelIDInput
  patientAppointmentsId: ModelIDInput
}

input CreateAppointmentInput {
  id: ID
  chosenSlot: String
  date: String!
  doctorAppointmentsId: ID
  patientAppointmentsId: ID
}

input UpdateAppointmentInput {
  id: ID!
  chosenSlot: String
  date: String
  doctorAppointmentsId: ID
  patientAppointmentsId: ID
}

input DeleteAppointmentInput {
  id: ID!
}

input ModelSubscriptionAppointmentFilterInput {
  id: ModelSubscriptionIDInput
  chosenSlot: ModelSubscriptionStringInput
  date: ModelSubscriptionStringInput
  createdAt: ModelSubscriptionStringInput
  updatedAt: ModelSubscriptionStringInput
  and: [ModelSubscriptionAppointmentFilterInput]
  or: [ModelSubscriptionAppointmentFilterInput]
}
